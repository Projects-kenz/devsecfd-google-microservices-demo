pipeline {
    agent any

    tools {
        go 'go1.25'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        AWS_ACCOUNT_ID = '229581542312' //better to give as secret text in credentials, im doing this for demo/learning purpose
        AWS_REGION = 'us-east-2'          
        ECR_REPO_NAME = 'devsecfd/productcatalogservice' 
        ECR_REPO_URL = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}"
        IMAGE_NAME = 'productcatalogservice'
        
    }

    stages {
        stage("Clean Workspace") {
            steps {
                cleanWs()
            }
        }

        stage("Git Checkout") {
            steps {
                git branch: 'main', url: 'https://github.com/Projects-kenz/devsecfd-google-shop-microservices.git'
            }
        }

        // --- Static Security Scan (SAST) ---
        stage('Go Security Scan (gosec)') {
            steps {
                dir('src/productcatalogservice') {
                    script {
                        sh '''
                        # Add Go binaries path to PATH for this script session
                        export PATH="$PATH:$(go env GOPATH)/bin"

                        # Install gosec if not present
                        if ! command -v gosec &> /dev/null; then
                            echo "Installing gosec..."
                            go install github.com/securego/gosec/v2/cmd/gosec@latest
                        fi

                        echo "Running gosec scan..."
                        
                        gosec -fmt=sonarqube -out gosec-report.json -no-fail ./...
                        '''
                    }
                }
            }
            post {
                always {
                    archiveArtifacts 'src/productcatalogservice/gosec-report.json'
                }
            }
        }
        // ---- Static Analysis & Report Ingestion ----
        stage("SonarQube Analysis") {
            steps {
                dir('src/productcatalogservice') {
                    withSonarQubeEnv('sonar-server') {
                        sh ''' $SCANNER_HOME/bin/sonar-scanner \\
                            -Dsonar.projectName=productcatalogservice \\
                            -Dsonar.projectKey=productcatalogservice \\
                            -Dsonar.sources=. \\
                            -Dsonar.language=go \\
                            -Dsonar.go.gosec.reportPaths=gosec-report.json '''
                    }
                }
            }
        }

         stage("Quality Gate") {
            steps {
                dir('src/productcatalogservice') {
                    script {
                        timeout(time: 3, unit: 'MINUTES') {
                            try {
                                waitForQualityGate abortPipeline: true, credentialsId: 'sonar-token'
                            } catch (Exception e) {
                                echo "Quality Gate failed but continuing for development: ${e.message}"
                                // Uncomment below line to make it non blocking
                                 currentBuild.result = 'UNSTABLE'
                            }
                        }
                    }
                }
            }
        }

        // --- Core CI Stages start after successful Quality Gate ---

        stage('Go Build') {
            steps {
                dir('src/productcatalogservice') {
                    sh '''
                    echo "Building Go productcatalogservice application..."
                    CGO_ENABLED=0 go build -o app .
                    '''
                }
            }
        }

        stage('Go Unit Tests') {
            steps {
                dir('src/productcatalogservice') {
                    sh '''
                    echo "Running unit tests with coverage..."
                    go test -v -coverprofile=coverage.out ./...
                    '''
                }
            }
        }

        // --- Dependency Check (SCA) ---
        stage('Go Dependency Check (govulncheck)') {
            steps {
                dir('src/productcatalogservice') {
                    script {
                        sh '''
                        
                        # Add Go binaries path to PATH for this script session
                        export PATH="$PATH:$(go env GOPATH)/bin"

                        # Install govulncheck if not present
                        if ! command -v govulncheck &> /dev/null; then
                            echo "Installing govulncheck..."
                            go install golang.org/x/vuln/cmd/govulncheck@latest
                        fi

                       
                    

                        echo "Running govulncheck on dependencies..."
                        # The '|| true' keeps the pipeline running even if vulnerabilities are found.(dont do this for demo im usin this)
                        govulncheck ./... || true
                        '''
                    }
                }
            }
        }
        stage("Trivy File Scan") {
            steps {
                dir('src/productcatalogservice') { 
                    script {
                        sh '''
                        echo "Running Trivy file system scan (Plain Text Report)..."

                       
                        # --severity CRITICAL,HIGH: Only reports CRITICAL and HIGH issues.
                        # --exit-code 1: Fails the Jenkins step if CRITICAL or HIGH issues are found.
                        # fs .: Scans the current directory (src/productcatalogservice).
                        trivy fs . \\
                            --severity CRITICAL,HIGH \\
                            --exit-code 1 \\
                            --scanners vuln,misconfig,secret \\
                            > trivy-fs-report.txt || true

                        
                        '''
                    }
                }
            }
            post {
                always {
                    
                    archiveArtifacts 'src/productcatalogservice/trivy-fs-report.txt'
                }
            }
        }
        stage("Build Docker Image") {
            steps {
                dir('src/productcatalogservice') {
                    script {
                        env.IMAGE_TAG = "$ECR_REPO_URL:${BUILD_NUMBER}"

                        //  cleanup THE previous DOCKER IMAGE so it will not affect disk by aggregating
                        sh "docker rmi -f $IMAGE_NAME ${env.IMAGE_TAG} || true"

                        sh "docker build -t $IMAGE_NAME ."
                        sh "docker tag $IMAGE_NAME ${env.IMAGE_TAG}"
                    }
                }
            }
        }
         stage("Trivy Scan Image") {
            steps {
                dir('src/productcatalogservice') {
                    script {
                        sh """
                        echo 'üîç Running Trivy scan on ${env.IMAGE_TAG}'

                        # JSON report
                        trivy image -f json -o trivy-image-productcatalogservice.json ${env.IMAGE_TAG}

                        # Text report
                        trivy image -f table -o trivy-image-productcatalogservice.txt ${env.IMAGE_TAG}

                        # Fail build if HIGH/CRITICAL vulnerabilities found
                         trivy image --exit-code 1 --severity HIGH,CRITICAL ${env.IMAGE_TAG} || true
                        """
                    }
                }
            }
           
        } 
        
        stage("Push to ECR") {
            steps {
                dir('src/productcatalogservice') {
                    script {
                         withCredentials([usernamePassword(credentialsId: 'aws-credentials', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                            sh """
                            # Login to ECR
                            echo "Logging into ECR..."
                            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
            
                            # Create ECR repository if it doesn't exist
                            echo "Checking ECR repository..."
                            aws ecr describe-repositories --repository-names ${ECR_REPO_NAME} --region ${AWS_REGION} || aws ecr create-repository --repository-name ${ECR_REPO_NAME} --region ${AWS_REGION}
            
                            # Push the build number tag
                            echo "Pushing image to ECR..."
                            docker push ${env.IMAGE_TAG}
            
                            # Also push latest tag
                            echo "Pushing latest tag..."
                            docker tag $IMAGE_NAME ${env.ECR_REPO_URL}:latest
                            docker push ${env.ECR_REPO_URL}:latest
            
                            echo "Successfully pushed to ECR: ${env.IMAGE_TAG}"
                            echo "Latest tag: ${env.ECR_REPO_URL}:latest"
                            """
                        }
                    }
                }
            }
        }  

        stage('Update manifest Files') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'github-credentials', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')]) {
                    sh """
                    git config user.email "kenzmazin67@gmail.com"
                    git config user.name "$GIT_USER"

                    echo "Updating Kubernetes manifests with image tag ${BUILD_NUMBER}"

                    # Update main deployment image
                    sed -i "s|image:.*|image: ${env.IMAGE_TAG}|g" k8s/productcatalogservice/deployment.yaml
            
                    git add k8s/productcatalogservice/deployment.yaml
                    git commit -m "CI: Update productcatalogservice image to ${BUILD_NUMBER}"
                    git push https://${GIT_USER}:${GIT_TOKEN}@github.com/Projects-kenz/devsecfd-google-shop-microservices.git main
                    """
                }
             }
           }  // <- This closes Update manifest Files stage
        }

    // Reports and informing the build details
    post {
        always {
            dir('src/productcatalogservice') {
                script {
                    def buildStatus = currentBuild.currentResult
                    def buildUser = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')[0]?.userId ?: ' Github User'

                    emailext (
                        subject: "Pipeline ${buildStatus}: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                        body: """
                            <p>productcatalogservice Google-Shop DevSecops pipeline status.</p>
                            
                            <p>Project: ${env.JOB_NAME}</p>
                            <p>Build Number: ${env.BUILD_NUMBER}</p>
                            <p>Build Status: ${buildStatus}</p>
                            <p>Started by: ${buildUser}</p>
                            <p>Build URL: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>

                        """,
                        to: 'kenzmazin67@gmail.com',
                        from: 'kenzmazin67@gmail.com',
                        mimeType: 'text/html',
                        attachmentsPattern: 'src/productcatalogservice/trivy-fs-report.txt,src/productcatalogservice/trivy-image-productcatalogservice.json,src/productcatalogservice/trivy-image-productcatalogservice.txt,gosec-report.json'
                    )
                }
            }
        }
    }
} // Closing brace for 'pipeline' block


